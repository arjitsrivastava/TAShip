(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'/home/yogesh/imp/ssad/web2py/applications/taship/controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\nfrom gluon.sqlhtml import form_factory\nimport socket\nfrom reportlab.platypus import *\nfrom reportlab.lib.styles import ParagraphStyle\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.rl_config import defaultPageSize\nfrom reportlab.lib.units import inch, mm\nfrom reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY\nfrom reportlab.lib import colors\nfrom uuid import uuid4\nfrom cgi import escape\nimport os\nimport ldap\n\n\nCAS.login_url=\'https://login.iiit.ac.in/cas/login\'\nCAS.check_url=\'https://login.iiit.ac.in/cas/validate\'\nCAS.logout_url=\'https://login.iiit.ac.in/cas/logout\'\nCAS.my_url=\'http://127.0.0.1:8000/taship/default/login\'\n\n\n# ---------- HOME PAGE IS SAME FOR ALL THE USERS --------------------\n\nif not session.token and not request.function==\'login\':\n    redirect(URL(r=request, f=\'login\'))\n\n#-------------------------------------------------------------------------------\ndef login():\n    session.login = 0 \n    session.token = CAS.login(request)\n    sem=db(db.Semester.id>0).select()\n    if sem:\n       session.current_semester = sem[0].semname\n    return dict(mesg="taship")\n#-------------------------------------------------------------------------------\nname=""\nroll=""\nfac=[]\n\ndef retrieve():\n    global name\n    global roll\n    \n    username=session.token\n    password=session.password\n    l = ldap.initialize("ldap://ldap.iiit.ac.in")\n    username=session.token\n    password=session.password\n   # l.simple_bind_s(username, password)\n    l.protocol_version = ldap.VERSION3  \n   \n    baseDN = "ou=Users,dc=iiit,dc=ac,dc=in"\n    searchScope = ldap.SCOPE_SUBTREE\n    searchFilter = "mail="+username\n   # p=ldap.filter.escape_filter_chars([username])\n       \n    \n    result = l.search_s(baseDN, searchScope, searchFilter)\n    entry = result[0]\n    name=entry[1][\'cn\'][0]\n    if \'uidNumber\' in entry[1]:\n        roll = entry[1][\'uidNumber\'][0]\n    else:\n        roll = entry[1][\'uid\'][0]\n#-------------------------------------------------------------------------------\n## supraja logout   \ndef logout():\n    u=None\n    if session.login==1:\n        u="admin"\n    elif session.login==2:\n        u="student"\n    elif session.login==3:\n        u="faculty"\n    ##supraja 73\n    db.auth_event.insert(description="logged out",origin=session.token,user_type=u,name=session.name,uid=session.roll)\n    \n    session.token=None\n    CAS.logout()\n#-------------------------------------------------------------------------------\ndef cprofile_display():\n\tif(session.login!=1):\n\t\tredirect(URL(r=request,f=\'index\'))\n\t\treturn dict()\n\tid1=request.args(0)\n\t        \n\trows1 = db(db.Course.cid==id1).select()\n\t  #  rows2 = db((db.Teach.course_id==db.rows1.Course.id)&(db.Faculty.id==db.Teach.faculty_id)).select()\n\tresponse.flash=id1\n\treturn dict(rows1=rows1)\n#---------------------- testing ignore------------------------------------------\ndef a():\n    return dict()\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef home_page():\n    ## supraja 85 86 87\n    retrieve()\n    session.name=name\n    session.roll=roll\n    if session.login == 0 :\n        if (session.token and session.token.split(\'@\')[1] == "students.iiit.ac.in"):\n            emailValue = db(db.Admin.ademail_id == session.token).select(db.Admin.ademail_id)\n            if( emailValue ):\n                ##supraja 91\n                db.auth_event.insert(origin=session.token,user_type="admin",description="logged in",name=session.name,uid=session.roll)\n                redirect(URL(r=request,f=\'sp_check\'))\n            else:\n                ##supraja 95\n                db.auth_event.insert(origin=session.token,user_type="student",description="logged in",name=session.name,uid=session.roll)\n                session.login = 2\n                session.student_email = session.token\n        if (session.token and session.token.split(\'@\')[1] == "research.iiit.ac.in"):\n            emailValue = db(db.Admin.ademail_id == session.token).select(db.Admin.ademail_id)\n            if( emailValue ):\n                ##supraja 102\n                db.auth_event.insert(origin=session.token,user_type="admin",description="logged in",name=session.name,uid=session.roll)\n                redirect(URL(r=request,f=\'sp_check\'))\n            else:\n                ##supraja 106\n                db.auth_event.insert(origin=session.token,user_type="student",description="logged in",name=session.name,uid=session.roll)\n                session.login = 2\n                session.student_email = session.token\n        elif(session.token and session.token.split(\'@\')[1] == \'iiit.ac.in\' ):\n            emailValue = db(db.Admin.ademail_id == session.token).select(db.Admin.ademail_id)   \n            if( emailValue ):\n                ##supraja 113\n                db.auth_event.insert(origin=session.token,user_type="admin",description="logged in",name=session.name,uid=session.roll)\n                redirect(URL(r=request,f=\'sp_check\'))\n            else :\n                ##supraja 117\n                db.auth_event.insert(origin=session.token,user_type="faculty",description="logged in",name=session.name,uid=session.roll)\n                session.faculty_login_emailid = session.token\n                session.login = 3\n                session.token = session.token\n    else:\n        session.token = session.token\n    return dict(mesg=session.token)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef sp_check():\n    return dict(mesg="taship")\n#-------------------------------------------------------------------------------\n\n#----------------- General Function for all ------------------------------------     \ndef courses_info():\n    r=db((db.Course.id==db.Teach.course_id) & (db.Teach.faculty_id == db.Faculty.id))\\\n        .select(db.Course.cname,db.Course.cid,db.Course.cdts,db.Course.hours_per_week,db.Faculty.fname,orderby=db.Course.cname)\n    return  dict(r=r)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef contacts():\n    r=db(db.Admin.id>0).select()\n    return dict(r=r)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef match_password(email, passwd,addr): \n# FUNCTION FOR VALIDATION OF USERNAME AND PASSWORD \n    f = email.split(\'@\')\n    username = f[0]\n    try:\n        address = addr \n        service_port = 61237\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((address,service_port))\n        tosend = \'auth \' + username + \' \' + passwd + \'\\r\\n\' # authorization format\n        sent = s.send(tosend)\n        chunk = s.recv(128)\n        s.close()\n        if (chunk == \'1 match\'+\'\\n\' ):\n            return \'1\';\n    except:\n        return False\n#-------------------------------------------------------------------------------\n\n## --------------------- TEMPORARY ---------------------------------------------\n#def truncate():\n# FUNCTION TO DELETE ALL THE ENTRIES OF THE TABLE \n#   db.Course.truncate()\n#   db.Applicant.truncate()\n#   db.Faculty.truncate()\n#   db.Semester.truncate()\n#   db.AppliedFor.truncate()\n#   db.OfferedTo.truncate()\n#   db.Teach.truncate()\n#   db.SelectedTA.truncate()\n\n#   return dict()\n#-------------------------------------------------------------------------------\n\n# -----  NEWMAIL FUNCTION FOR SENDING MAILS TO THE ADMIN FACULTY AND TAS -------\nimport smtplib\nimport gluon\n\nclass NewMail(object):\n    def __init__(self):\n        self.settings = gluon.tools.Settings()\n        self.settings.server = \'smtp.gmail.com:587\'\n        self.settings.use_tls = True\n        self.settings.sender = \'\'\n        self.settings.login = ""\n        self.settings.lock_keys = True\n    def send(self,to,subject,mesg):\n            try:\n                (host, port) = self.settings.server.split(\':\')\n                server = smtplib.SMTP(host, port)\n                if self.settings.login:\n                    server.ehlo()\n                    server.ehlo()\n                    (username, password) = self.settings.login.split(\':\')\n                mesg = "From: %s\\n"%(self.settings.sender)+"To: %s\\n" %(to)+"Subject: %s\\n" % (subject)+"\\r\\n"+(mesg)+"\\r\\n"\n                server.sendmail(self.settings.sender, to, mesg)\n                server.quit()\n            except Exception, e:\n                print e\n                return False\n            return True\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef sendmail(sender,reciever,subj,title):\n\n    mail=NewMail()\n    # specify server\n    mail.settings.server=\'mail.iiit.ac.in:25\'\n    mail.settings.login=\'username:password\' or None\n\n# specify address to send as\n    mail.settings.sender=sender\n\n#   mail.settings.lock_keys=True\n    mail.settings.use_tls=True\n#       return mail.settings.keys()\n#send the message\n    print "Mail to be sent"\n    return mail.send(to=reciever, subject=title, mesg=subj)\n# ----->>>  mail server is kept "mail.iiit.ac.in" <<<<--------------------------\n#-------------------------------------------------------------------------------\n\n\n#------------- ADMIN LOGIN FUNCITON --------------------------------------------\n# FUNCTION GENERATE FOLLOWING SESSION VARIABLES\n# session.login = 1\n# session.admin_email = email of admin logged in\n\ndef admin_login():\n    form = form_factory(\n            SQLField(\'Username\', \'string\', requires = IS_NOT_EMPTY()),\n            SQLField(\'Password\', \'password\', requires = IS_NOT_EMPTY()))\n\n    if form.accepts(request.vars, session):\n        username = request.vars.Username\n        password = request.vars.Password\n    #if valid username then check password with the server\n        emailValue = db(db.Admin.adname == username).select(db.Admin.ademail_id)    \n        if(emailValue):\n            for row in emailValue:\n                email = row.ademail_id\n                value = match_password(email, password, \'mail.iiit.ac.in\')\n                if(value == \'1\'):                           # login successful\n                    session.login = 1\n                    session.admin_email = email\n                    session.flash = \'Login Successful\'\n                else:                               # login failure\n                    response.flash = \'Incorrect Username or Password\'+str(value)\n        else:\n            response.flash = \'Incorrect Username or Password\'  # incorrect username\n    return dict(form=form)\n#-------------------------------------------------------------------------------\n\n#------------------ STUDENT LOGIN FUNCTION -------------------------------------\n# FUNCTION GENERATES FOLLOWING SESSION VARIABLES \n# session.login=2\n# session.student_email=email\n\ndef student_login():    \n   # form is created in views/student_login.html \n    if(request.vars.submit):\n        email = request.vars.username + \'@\' + request.vars.email\n        passwd = request.vars.password\n        value = match_password(email, passwd, request.vars.email)\n        if(value == \'1\'):\n            session.login = 2\n            session.student_email = email\n            session.flash = \'Login Successful\'\n        else: \n            response.flash = \'Incorrect Username or Password\'\n    return dict()\n#-------------------------------------------------------------------------------\n\n#------------------------------- FACULTY LOGIN ---------------------------------\n# FUNCTION GENERATES FOLLOWING SESSION VARIABLES\n# session.login=3\n# session.faculty_login_email = email_of_faculty_loggedin\n\ndef faculty_login():\n    form = form_factory(\n            SQLField(\'Username\', \'string\', label = \'Username  \', requires = IS_NOT_EMPTY()),\n            SQLField(\'Password\', \'password\', label = \'Password  \', requires = IS_NOT_EMPTY()))\n\n    if form.accepts(request.vars, session):\n        username = request.vars.Username\n        password = request.vars.Password\n        value = match_password(username, password, \'iiit.ac.in\')\n        if(value == \'1\'):\n            session.login = 3\n            session.faculty_login_emailid = username\n            session.flash = \'Login Succesful\'\n        else:\n            response.flash = \'Incorrect Username or Password\'\n    return dict(form=form)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef logout1():\n    # updating all the session variables used to default => no user is logged in\n    session.login = 0\n    session.student_email = 0\n    session.admin_email = 0\n    session.faculty_login_emailid = 0\n#   session.flash = "Successfully Logged out"\n    redirect(URL(r = request, f = \'logout\'))\n    return dict()\n\n# -------------- Applicant related queries  starts here ------------------------\nimport datetime\n\n\n#---------------modified by Team 26---------------------------------------------\n\ndef TA_application():\n   # checking whether applicant is logged in or not\n    if session.login != 2 :     \n       redirect(URL(r = request , f = \'index\'))\n       return dict()\n    \n    msg = \'\'                            #  msg is for returning to the html file        \n    record = []                         #  record stores the info of the applicant if he has already applied \n    session.alreadyThereFlag = 0                    #  used in the corresponding html file to see if an applicant has already applied or not\n    now = datetime.datetime.now()\n    portal_date=db(db.Portaldate.id>0).select()    \n    now = datetime.datetime.now()\n    if portal_date:                     #------check if there is a record in portal_date\n        start=portal_date[0].start_date  \n        end=portal_date[0].end_date\n        if now < start :\n            session.flash = \'Wait till %s\'%start.strftime(\'%d %B %Y %I:%M%p\')\n            redirect(URL(r=request,f=\'home_page\'))\n        elif now > end: \n            session.flash = \'Deadline over at %s\'%end.strftime(\'%d %B %Y %I:%M%p\')\n            redirect(URL(r=request,f=\'home_page\'))\n        elif now > start and now <  end :\n\n            if db(db.Applicant.apemail_id == session.student_email).select():   # if an applicant is already applied \n                session.alreadyThereFlag = 1                        \n                applicantInfo = db((db.Applicant.apemail_id == session.student_email) & (db.Applicant.program_id == db.Program.id)).select()\n                appid = db(db.Applicant.apemail_id == session.student_email).select(db.Applicant.id)[0]\n\t\tif (db(db.Applicant.apemail_id == session.student_email).select(db.Applicant.phoneno)[0].phoneno) == None:\n#print \'coming here\'\n\t\t\tform = form_factory(\n\t\t\t\t\tSQLField(\'phone\', \'string\', label = \'Phone No\'),\n\t\t\t\t\tSQLField(\'program\', label = \'Program Of Study\', requires = IS_IN_DB(db,\'Program.id\',\'%(pname)s\')))\n#\t\t\tif (db(db.ta_applicant.applicantid==session.student_email).select()) != None:\n\t\t\tr=""\n\t\t\tif ti.month < 7:\n\t\t\t\tr=str(t.year)+" "+"Spring"\n\t\t\telse:\n\t\t    \t\tr=str(t.year)+" "+"Monsoon"\n\t\t\tpqr=db((db.ta_applicant.applicantid==session.student_email) & (db.ta_records.time!=r)).select()\n\t\t\tnumber=0\n\t\t\tfor i in pqr:\n\t\t\t\tnumber=i.applicant_id\n                \tif number!=0:\n                   \t\texp = \'Yes\'\n                \telse:\n                   \t\texp = \'No\'\n\t\t\t\tdb(db.Applicant.apemail_id==session.student_email).update(prev_exp=exp)\n\t\t\tif form.accepts(request.vars,session):\n\t\t\t\tdb(db.Applicant.apemail_id==session.student_email).update(phoneno=request.vars.phone,program_id=request.vars.program)\n\t\t\t\tredirect(URL(r=request,f=\'TA_application\'))\n\t\t\treturn dict(form=form)\n\n                course =db(db.AppliedFor.appid == appid).select()   #---- courses for which applicant has applied\n                pref_sel =[]    #---- preferences corresponding applied courses \n                for rows in course:\n                    if rows.preference:\n                        pref_sel.append(int(rows.preference))\n                pref_rem=[]\n                pref_rem=[i for i in range(1,11) if i not in pref_sel]            \n                form = form_factory(                        # creating a form for the applicant to select course\n                    SQLField(\'course\', label = \'Course\', requires = IS_IN_DB(db, \'Course.id\', \'%(cname)s ( %(cid)s )\')),\n                    SQLField(\'grade\', label = \'Grade In The Course\', requires = IS_IN_SET([\'A\',\'A-\',\'B\',\'B-\',\'C\',\'NA\'])),\n                    SQLField(\'preference\', label = \'Preference\', requires = IS_IN_SET(pref_rem)))\n            else:\n                                            # ------------ else if the applicant has applied for the first time --------------- \n                form = form_factory(\n\t\t        SQLField(\'name\', \'string\', label = \'Name\', requires = IS_NOT_EMPTY()),\n                        SQLField(\'rollno\', \'integer\', label = \'Roll No\',requires = IS_NOT_EMPTY()),\n                        SQLField(\'program\', label = \'Program Of Study\', requires = IS_IN_DB(db,\'Program.id\',\'%(pname)s\')),\n                        SQLField(\'CGPA\', \'double\', requires = IS_FLOAT_IN_RANGE(0,10)),\n                        SQLField(\'phone\', \'string\', label = \'Phone No\'),\n#                        SQLField(\'phone\', \'bigint\', label = \'Phone No\'),\n                        )\n#\t\tprint number\n#\t\tprint \'check karing\'\n#\t    \tif (db(db.ta_applicant.applicantid==session.student_email).select(db.ta_applicant.applicant_id)) != None:\n#\t\t\tdb(db.Applicant.apemail_id==session.student_email).update(prev_exp=\'Yes\')\n\n            if form.accepts(request.vars, session):             # ----------------- if the form is submitted ----------------------------\n                name = request.vars.name\n                rollno = request.vars.rollno\n                program = request.vars.program\n                course = request.vars.course\n                grade = request.vars.grade\n                cgpa = request.vars.CGPA\n                phone = request.vars.phone\n                exp = request.vars.experience\n                preference=request.vars.preference\n\t\tti=datetime.datetime.now()\n\t\tr=""\n\t\tif ti.month < 7:\n\t\t\tr=str(ti.year)+" "+"Spring"\n\t\telse:\n\t\t    \tr=str(ti.year)+" "+"Monsoon"\n\t\tpqr=db((db.ta_applicant.applicantid==session.student_email) & (db.ta_records.time!=r)).select(db.ta_applicant.applicant_id)\n\t\tnumber=0\n\t\tfor i in pqr:\n\t\t\tnumber=i.applicant_id\n\t\tprint number\n\t\tprint "boing"\n                if number!=0:\n                   exp = \'Yes\'\n                else:\n                   exp = \'No\'\n\n                if(session.alreadyThereFlag == 1):          \n                    r = db(db.Applicant.apemail_id == session.student_email).select()\n                    for rows in applicantInfo:\n                        appid = rows.Applicant.id\n                else:               # ----------- else insert and get the .id of the applicant ----------   \n                    appid = db.Applicant.insert(apname = name, aprollno = rollno , apemail_id = session.student_email,apcgpa = cgpa, phoneno = phone, prev_exp = exp, program_id = program)\n                    db.auth_event.insert(origin=session.student_email,user_type="student",description="profile updated",name=session.name,uid=session.roll)\n                    mesg = "!! Profile Successfully Updated !! "                \n                \n                if(session.alreadyThereFlag == 1):\n                    s = db((db.AppliedFor.appid == appid) & (db.AppliedFor.cid == course)).select()   \n                    # ---- if he/she has applied for the course -----------\n                    if(s):\n                        a = 1\n                        session.flash = \'!! You have already applied for this course !!\'\n                        redirect(URL(r = request, f = \'TA_application\'))\n                    else:               # else fill info in the database\n                        db.AppliedFor.insert(appid = appid , cid = course, noflag = 0, timestamp = datetime.date.today(), grade = grade,preference=preference) \n                        c=db(db.Course.id==course).select()[0]\n                        db.auth_event.insert(origin=session.student_email,user_type="student",description="applied for "+c.cname,name=session.name,uid=session.roll)\n\t\t\tCourse=db(db.Course.id==course).select(db.Course.cname)\n\t\t\tfor i in Course :\n\t\t\t\tcourse=i.cname\n\t\t        x=""\n\t\t        t = datetime.datetime.now()\n\t\t        if t.month < 7 :\n\t\t                x=str(t.year)+" "+"Spring"\n\t\t        else :\n\t\t                x=str(t.year)+" "+"Monsoon"\n\t\t\tquery=db((db.logs.cname==course) & (db.logs.time==x)).select(db.logs.id)\n\t\t\tflag_c=0\n\t\t\tentry=0\n\t\t\tfor i in query:\n\t\t\t \tentry=i.id\n#print entry\n#\t\t\tprint course\n\t\t\tqu=db(db.Applicant.id==appid).select(db.Applicant.aprollno)\n\t\t\troll=0\n\t\t\tfor i in qu:\n\t\t\t\troll=i.aprollno\n\t\t\tif entry >0 :\n\t\t\t\tflag_c=1\n    \t\t\tt = datetime.datetime.now()\n#\t\t\tx=""\n\t\t\tif flag_c==1 :\n\t\t\t\tq=db(db.logs.cname==course).select(db.logs.No_of_TAs_applied)\n\t\t\t\tp=q[0].No_of_TAs_applied\n\t\t\t\tp+=1\n\t\t\t\tdb(db.logs.id==entry).update(No_of_TAs_applied=p)\n\t\t\t\tdb.logs_applicant.insert(logid=entry,applicant_id=roll,applicant_name=session.name,applicantid=session.student_email,Status=\'None\')\n\t\t\telse :\n\t\t\t\n#\t\t\t\tif t.month < 7 :\n#\t\t\t\t\tx=str(t.year)+" "+"Spring"\n#\t\t\t\telse :\n#\t\t\t\t\tx=str(t.year)+" "+"Monsoon"\n\t\t\t\tq=db(db.Course.cname==course).select(db.Course.cid)\n\t\t\t\tfor i in q:\n\t\t\t\t\tcd=i.cid\n\t\t\t\tdb.logs.insert(time=x,cname=course,cid=cd,No_of_TAs_applied=1)                    \n\t\t\t\tquery=db(db.logs.cname==course).select(db.logs.id)\n\t\t\t\tfor i in query:\n\t\t\t \t\tentry=i.id\n\t\t\t\tdb.logs_applicant.insert(logid=entry,applicant_id=roll,applicant_name=session.name,applicantid=session.student_email)\n                        session.flash = \'!! Thank You for Application !!\'\n                        redirect(URL(r = request, f = \'TA_application\'))\n                else :\n                    session.flash = mesg\n                    redirect(URL(r = request, f = \'TA_application\'))\n    else :\n        session.flash = \'Portal not yet Started  !!\'\n        redirect(URL(r=request,f=\'home_page\'))\n    return dict(form = form)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef student_profile():\n    if ( session.login != 2 ):\n        redirect(URL(r=request, f=\'index\'))\n        return dict()\n    records = db((db.Applicant.apemail_id == session.student_email) & (db.Applicant.program_id == db.Program.id)).select()\n    return dict(records=records)\n\n\n\ndef student_details():\n    x=request.args(0)\n    flag=0\n    if ( session.login == 2 ):\n        redirect(URL(r=request, f=\'index\'))\n        return dict()\n    records = db((db.Applicant.aprollno==x) & (db.Applicant.program_id==db.Program.id)).select()\n    query = db(db.Feedback.s_id==x).select()\n    if(query!=None):\n\t    flag=1\n\n    return dict(records=records,query=query,flag=flag)\n#-------------------------------------------------------------------------------\n\n#---------- inserted by Team 26-------------------------------------------------\ndef unselect_course():\n    if session.login != 2:                      \n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    appid=db(db.Applicant.apemail_id == session.student_email).select(db.Applicant.id)[0]     #----stores the applicant id of current user\n    appcor=db((db.AppliedFor.appid == appid)&(db.AppliedFor.cid==db.Course.id)).select()     #-----stores all courses for which user has applied\n    form = form_factory(                        # -------- creating form for unselecting  course --------------         \n    SQLField(\'course\', label = \'Select Course \'))\n    return dict(form=form,appid=appid,appcor=appcor)\n#-------------------------------------------------------------------------------\n\n#---------- inserted by Team 26-------------------------------------------------\ndef status():\n    if ( session.login != 2 ):\n        redirect(URL(r=request, f=\'index\'))\n        return dict()\n    appid=db(db.Applicant.apemail_id == session.student_email).select(db.Applicant.id)[0]#----stores the applicant id of current user\n#  name=db(db.Applicant.apemail_id == session.student_email).select(db.Applicant.apname)#----stores the applicant id of current user\n#   for i in name:\n#\taname=i.apname\n#   print aname\n    records_appliedfor = db((db.AppliedFor.appid == db.Applicant.id) & (db.AppliedFor.cid == db.Course.id) &\\\n          (db.Applicant.apemail_id == session.student_email)).select(orderby=db.AppliedFor.preference)\n    record_appliedfor = db((db.AppliedFor.appid == db.Applicant.id) & (db.AppliedFor.cid == db.Course.id) &\\\n          (db.Applicant.apemail_id == session.student_email)).select(db.AppliedFor.status)\n    flag=0\n\t#state=4\n#    print state\n#  print \'working\'\n    for i in record_appliedfor:\n\tif i.status==\'Selected\':\n\t\tflag=1\n#   print flag\n    records= db((db.AppliedFor.appid == appid) & (db.AppliedFor.cid == db.Course.id) ).select(orderby=db.AppliedFor.preference)\n    portal_date=db(db.Portaldate.id>0).select()\n    now = datetime.datetime.now()\n    if portal_date:\n        start=portal_date[0].start_date\n        end=portal_date[0].end_date\n        if now < start :\n#print \'now < start\'\n            state=0\n#\t    print state\n            session.flash = \'Wait till %s\'%start.strftime(\'%d %B %Y %I:%M%p\')\n            redirect(URL(r=request,f=\'index\'))\n        elif now > start and now <  end :\n#\t    print \' now > start and now < end\'\n            state=1\n#\t    print state\n            if request.vars.index:\n                index=int(request.vars.index)\n            apfid=request.vars.apfid    \n            if request.vars.submit==\'up\' :\n                pref_curr= int(records[index].AppliedFor.preference)\n                if index<len(records) and index>0:                                        \n                    pref_prev=int(records[index-1].AppliedFor.preference)\n                    if  pref_curr == pref_prev + 1 :\n                        db(db.AppliedFor.id==records[index].AppliedFor.id).update(preference=pref_prev)\n                        db(db.AppliedFor.id==records[index-1].AppliedFor.id).update(preference=pref_curr)\n                    elif pref_curr > pref_prev + 1 :\n                        db(db.AppliedFor.id==records[index].AppliedFor.id).update(preference=pref_curr-1)\n                    redirect(URL(r=request,f=\'status\'))\n                                       \n                elif index == 0:\n                    if pref_curr != 1:\n                        db(db.AppliedFor.id==records[index].AppliedFor.id).update(preference=pref_curr-1)\n                    redirect(URL(r=request,f=\'status\'))\n                   \n            elif request.vars.submit==\'down\':\n                if index < len(records)-1 and index >= 0:\n                    pref_curr = int(records[index].AppliedFor.preference)\n                    pref_next = int(records[index+1].AppliedFor.preference)\n                    if  pref_curr == pref_next - 1 :\n                        db(db.AppliedFor.id == records[index].AppliedFor.id).update(preference=pref_next)\n                        db(db.AppliedFor.id == records[index+1].AppliedFor.id).update(preference=pref_curr)\n                    elif pref_curr < pref_next - 1:\n                        db(db.AppliedFor.id == records[index].AppliedFor.id).update(preference=pref_curr+1)\n                    redirect(URL(r=request,f=\'status\'))\n        if flag==1:\n            state=2\n\t    print \'coming here\'\n            if request.vars.submit==\'accept\':\n                Id2 = db(db.SelectedTA.appid == appid).select()[0]\n                if Id2:                 #----check if applicant is selected by Admin\n                    db(db.SelectedTA.appid == appid).update(flag=1)\n                    course=db(db.Course.id==request.vars.cid).select()[0]\n\t\t    c=db(db.logs.cname==course.cname).select(db.logs.id)[0]\n\t\t    print c.id\n\t\t    print \'arbit kuch bhi\'\n\t\t    print course.cname\n\t\t    print session.student_email\n\t\t    Courses=db(db.Course.id==course.id).select(db.Course.cname)\n\t\t    for i in Courses :\n\t\t    \tcourses=i.cname\n\t\t    x=""\n    \t\t    t = datetime.datetime.now()\n\t\t    if t.month < 7 :\n\t\t\tx=str(t.year)+" "+"Spring"\n\t\t    else :\n\t\t\tx=str(t.year)+" "+"Monsoon"\n\t\t    query=db((db.ta_records.cname==courses) & (db.ta_records.time==x)).select(db.ta_records.id)\n\t\t    flag_c=0\n\t\t    entry=0\n\t\t    for i in query:\n\t\t    \tentry=i.id\n\t\t    print entry\n\t\t    print courses\n\t\t    qu=db(db.Applicant.id==appid).select(db.Applicant.aprollno)\n\t\t    roll=0\n\t\t    for i in qu:\n\t\t    \troll=i.aprollno\n\t\t    if entry >0 :\n\t\t    \tflag_c=1\n\n\t\t    if flag_c==1 :\n\t\t    \tq=db(db.ta_records.cname==courses).select(db.ta_records.No_of_TAs)\n\t\t    \tp=q[0].No_of_TAs\n\t\t    \tp+=1\n\t\t\tdb(db.ta_records.id==entry).update(No_of_TAs=p)\n\t\t\tdb.ta_applicant.insert(ta_id=entry,applicant_id=roll,applicant_name=session.name,applicantid=session.student_email)\n\t\t    else :\n\t\t\t\n\t\t\tq=db(db.Course.cname==courses).select(db.Course.cid)\n\t\t\tfor i in q:\n\t\t\t\tcd=i.cid\n\t\t\tdb.ta_records.insert(time=x,cname=courses,cid=cd,No_of_TAs=1)                    \n\t\t\tquery=db(db.ta_records.cname==courses).select(db.ta_records.id)\n\t\t\tfor i in query:\n\t\t \t\tentry=i.id\n\t\t\tdb.ta_applicant.insert(ta_id=entry,applicant_id=roll,applicant_name=session.name,applicantid=session.student_email)\n\t\t    \n# db(db.Applicant.apemail_id==session.student_email).update(prev_exp=\'Yes\')\n\t\t    db((db.logs_applicant.applicantid==session.student_email) & (db.logs_applicant.logid==c.id)).update(Status=\'Accepted\')\n                    db.auth_event.insert(origin=session.student_email,user_type="student",description="accepted course "+course.cname,name=session.name,uid=session.roll)\n            \tsession.flash = \'Get your TA reporting form from "TA Reporting Form" button in menu bar\'\n                redirect(URL(r = request, f = \'status\'))\n            elif request.vars.submit==\'reject\':\n\t    \tcourse=db(db.Course.id==request.vars.cid).select()[0]\n\t\tc=db(db.logs.cname==course.cname).select(db.logs.id)[0]\n\t\tdb((db.logs_applicant.applicantid==session.student_email) & (db.logs_applicant.logid==c.id)).update(Status=\'Rejected\')\n                Id1 = db((db.AppliedFor.appid == appid) & (db.AppliedFor.cid ==request.vars.cid)).select()\n                Id2 = db(db.SelectedTA.appid == appid).select()[0]\n                if Id1 and Id2 :\n                    db((db.AppliedFor.appid == appid) & (db.AppliedFor.cid ==request.vars.cid)).delete()\n                    a=db(db.SelectedTA.appid == appid).select()[0]\n                    if a.TAtype==\'quarter\':\n                              b=db(db.Course.id==request.vars.cid).select()[0].no_of_qta\n                              db(db.Course.id==request.vars.cid).update(no_of_qta=b-1)                                   \n                    elif a.TAtype==\'half\':\n                                 b=db(db.Course.id==request.vars.cid).select()[0].no_of_hta\n                                 db(db.Course.id==request.vars.cid).update(no_of_hta=b-1)\n                    else:\n                                 b=db(db.Course.id==request.vars.cid).select()[0].no_of_fta\n                                 db(db.Course.id==request.vars.cid).update(no_of_fta=b-1)\n                    course=db(db.Course.id==request.vars.cid).select()[0]\n                    db.auth_event.insert(origin=session.student_email,user_type="student",description="rejected course "+course.cname,name=session.name,uid=session.roll)\n                \n                    db(db.SelectedTA.appid == appid).delete()\n                    \n                    db((db.AppliedFor.appid == appid)).update(noflag=\'0\')\n                    session.flash = \'Course rejected Successfully \'\n                redirect(URL(r = request, f = \'status\'))        \n    else :\n        start=0\n    return dict(records_appliedfor=records_appliedfor,state=state,records=records,flag=flag)\n#-------------------------------------------------------------------------------\ndef isas_upload():\n    if(session.login!=1):\n\tredirect(URL(r=request,f=\'index\'))\n\treturn dict()\n    form = crud.create(db.isas_upload)\n    if form.accepts(request.vars,session) :\n\t    \n    \tr=db(db.isas_upload.id>0).select()\n    \tk=r[len(r)-1]\n\tk=k.file.split(\'.\')[2:]\n\tk=\'.\'.join(k)\n\tdb.auth_event.insert(origin=session.token,user_type="admin", description="uploaded file "+k,name=session.name,uid=session.roll)\n\ti=r[len(r)-1]\n\tfilename=os.path.join(request.folder,\'uploads\',i.file)\n\tf=open(filename)\n\tfor lines in f.readlines():\n\t\tlines=lines.strip(\'\\n\\r\')\n\t\tlist=lines.split(\',\')\n\t\tif( not( db(db.Applicant.aprollno==list[1].strip()).select())):\n\t\t\tdb.Applicant.insert(apname=list[0].strip(),aprollno=list[1].strip(),apemail_id=list[2].strip(),apcgpa=list[3].strip())\n#print k\n    return dict(form=form)\n\t\n\t\n\t\ndef feedback_upload():\n    if(session.login!=1):\n\tredirect(URL(r=request,f=\'index\'))\n\treturn dict()\n    form = crud.create(db.feedback_upload)\n    if form.accepts(request.vars,session) :\n\t    \n    \tr=db(db.feedback_upload.id>0).select()\n    \tk=r[len(r)-1]\n\tk=k.file.split(\'.\')[2:]\n\tk=\'.\'.join(k)\n\tdb.auth_event.insert(origin=session.token,user_type="admin", description="uploaded file "+k,name=session.name,uid=session.roll)\n\ti=r[len(r)-1]\n\tfilename=os.path.join(request.folder,\'uploads\',i.file)\n\tf=open(filename)\n\tfor lines in f.readlines():\n\t\tlines=lines.strip(\'\\n\\r\')\n\t\tlist=lines.split(\';\')\n\t\tif( not( db((db.Feedback.s_id==list[1].strip()) & (db.Feedback.course_id==list[2].strip())).select())):\n\t\t\tdb.Feedback.insert(s_id=list[1].strip(),course_id=list[2].strip(),rating=list[3].strip(),course_name=list[4].strip(),Comments=list[6].strip(),time=list[5].strip())\n    return dict(form=form)\n#print k\n\t\ndef makeStringForPdf():\n    global fac \n    appid=db(db.Applicant.apemail_id == session.student_email).select(db.Applicant.id)[0]     #----stores the applicant id of current user\n    user = db( ( db.SelectedTA.appid == appid )  & (db.Applicant.id == appid ) \\\n    & ( db.Applicant.program_id == db.Program.id ) & ( db.Course.id == db.SelectedTA.cid ) ).select()[0]\n    fac=db((db.Teach.course_id==user.Course.id) & (db.Faculty.id==db.Teach.faculty_id)).select(db.Faculty.fname)\n    #print user\n    # insert any extra info you want to add in pdf form\n    data=\'\'\n    data+="Name of the TA : "+ str(user.Applicant.apname)  + "\\n"+","\n    data+=" Roll No: "+ str(user.Applicant.aprollno) + "\\n"+","\n    data+="Email ID : "+ str(user.Applicant.apemail_id) + "\\n"+"," \n    data+=" Mobile No: "+str(user.Applicant.phoneno) +"\\n"+","\n    \n    data+="Subject : "+ str(user.Course.cname) +"\\n"+","\n    data+="Date of assuming as TA\\\\" + "\\n" + "Commencement of tutorial classes :\\n\\n"+"," \n    data+="Date of selection :" +str(user.SelectedTA.timestamp)+ "\\n"+"," \n    data+="IIIT Campus SBH Account No : "+ "\\n" + "(Compulsory-11 Digits)\\n (Personal SB A/c No. Only)\\n\\n"+","\n    data+="TA ship recommended per month :\\n"+","\n    \n    data+="Other assistantships / Jobs if any :\\n"+","\n    \n   \n    return data\n#----------- FUNCTIONALITY FOR ADMIN -------------------------------------------\ndef getPdf():\n    if ( session.login != 2 ):\n        redirect(URL(r=request, f=\'index\'))\n        return dict()\n    title = "TA allocation form"\n    title1 ="International Institute of Information Technology, Hyderabad"\n    text =makeStringForPdf()\n    text=text.split(",")\n    styles = getSampleStyleSheet()\n    #styles.add(ParagraphStyle(name=\'Table Top Black Back\', fontName =\'Helvetica\',fontSize=14, leading=16,backColor = colors.black, textColor=colors.white, alignment=TA_LEFT))\n    styles.add(ParagraphStyle(name=\'Top\', alignment=TA_CENTER, fontSize=16 , fontName =\'Helvetica\'))\n    styles.add(ParagraphStyle(name=\'Info\', alignment=TA_CENTER, fontSize=14 , fontName =\'Helvetica-Bold\'))\n    styles.add(ParagraphStyle(name=\'Info2\', alignment=TA_RIGHT, fontSize=10 , fontName =\'Helvetica\'))\n    styles.add(ParagraphStyle(name=\'Info3\', alignment=TA_LEFT, fontSize=10 , fontName =\'Helvetica-Bold\'))\n    styles.add(ParagraphStyle(name=\'Info4\', alignment=TA_RIGHT, fontSize=10 , fontName =\'Helvetica-Bold\'))\n    tmpfilename=os.path.join(request.folder,\'private\',str(uuid4()))\n    doc = SimpleDocTemplate(tmpfilename)\n    taappform=[]\n    taappform.append(Paragraph(escape(title1),styles["Top"]))\n    taappform.append(Spacer(2,0.1*inch))\n    taappform.append(Paragraph("(Deemed University) ",styles["Top"]))\n    taappform.append(Spacer(2,0.3*inch))\n    taappform.append(Paragraph("""<u>TA Reporting Form for Monsoon / Spring </u> """,styles["Info"]))\n    taappform.append(Spacer(2,0.3*inch))\n    name=text[0][17:]\n    for line in text:        \n        line=line.split("\\n")\n        for  bit in line :\n            taappform.append(Paragraph(escape(bit),styles["Normal"]))\n        taappform.append(Spacer(2,0.4*inch))\n    taappform.append(Paragraph("Signature of the Student",styles["Info2"]))\n    taappform.append(Spacer(2,0.4*inch))\n    taappform.append(Paragraph("Signature of the Chair-TA ship Committee",styles["Normal"]))\n    taappform.append(Spacer(2,0.5*inch))\n    taappform.append(Paragraph("Signature of the Faculty",styles["Normal"]))\n    taappform.append(PageBreak())\n    taappform.append(Paragraph(escape(title1),styles["Top"]))\n    taappform.append(Spacer(2,0.1*inch))\n    taappform.append(Paragraph("(Deemed University) ",styles["Top"]))\n    taappform.append(Spacer(2,0.3*inch))\n    taappform.append(Paragraph("""<u>Teaching Assistant\'s Undertaking Form</u> """,styles["Info"]))\n    taappform.append(Spacer(2,0.3*inch))\n    \n    taappform.append(Paragraph("I " +"""<u><b> """+name+""" </u></b>"""+ "hereby declare that as a Teaching Assistant I will fulfill the following duties assigned to me.",styles["Normal"]))\n    taappform.append(Spacer(2,0.2*inch))\n    taappform.append(Paragraph(" &nbsp&nbsp&nbsp 1. Conduct of tutorial class regularly (one class per week) and maintenance of attendance records to the tutorial classes.",styles["Normal"]))\n    taappform.append(Paragraph(" &nbsp&nbsp&nbsp 2. Meeting the faculty once in a week to give feedback of the tutorial class and submission of attendance sheets. ",styles["Normal"]))\n    taappform.append(Paragraph(" &nbsp&nbsp&nbsp 3. Evaluation of Mid Sem / End Sem answer scripts and submission of marks to the faculty within one week after the last day of concernced examinations. ",styles["Normal"]))\n    taappform.append(Paragraph(" &nbsp&nbsp&nbsp 4. Evaluation of Quiz / surprise tests etc., and submission of marks to the faculty within a week\'s time of the conduct of the said test / Quiz. ",styles["Normal"]))\n    taappform.append(Spacer(2,0.2*inch))\n    taappform.append(Paragraph(" Note: For programming assignments or assignments on which students spend tremendous amount of time, the TA\'s should not set the deadline of submission after 9:00 PM (Monday to Friday) and on Saturdays and Sundays. ",styles["Info3"]))\n    taappform.append(Spacer(2,0.2*inch))\n    taappform.append(Paragraph(" &nbsp&nbsp&nbsp&nbsp TA ship duties are an important part in effective running of the academic programmes of the Institute. I have read and I understood that if I do not perform my duties as TA properly, I can be penalized through fines, and other disciplinary action such as noting of this fact on my transcript. ",styles["Normal"]))\n    taappform.append(Spacer(2,0.3*inch))\n    course=text[4][10:]\n    taappform.append(Paragraph("Course: "+course,styles["Info3"]))\n    taappform.append(Paragraph("TA\'s Signature",styles["Info4"]))\n    taappform.append(Spacer(2,0.3*inch))\n    taappform.append(Paragraph("Faculty: ",styles["Info3"]))\n    taappform.append(Paragraph("Faculty\'s Signature",styles["Info4"]))\n    for fname in fac:\n        taappform.append(Paragraph(" &nbsp&nbsp "+fname.fname,styles["Normal"]))\n    \ttaappform.append(Spacer(2,0.1*inch))\n    taappform.append(Spacer(2,0.3*inch))\n    taappform.append(Paragraph("Date: ",styles["Info3"]))\n    \n    doc.build(taappform)\n    data = open(tmpfilename,"rb").read()\n    os.unlink(tmpfilename)\n    response.headers[\'Content-Type\']=\'application/pdf\'\n    return data\n#------------------modified by Team 26------------------------------------------\ndef add_courses():\n    if (session.login != 1) :\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n\n#------------------  CREATING FORM FOR THE NEW COURSE --------------------------\n#-----------used to get course information--------------------------------------\n    form = form_factory(\n        SQLField(\'Cname\', \'string\', label = \'Course Name\', requires = IS_NOT_EMPTY(error_message = T(\'fill this\'))),\n        SQLField(\'Cid\', \'string\', label = \'Course Id\', requires = IS_NOT_EMPTY(error_message = T(\'fill this\'))),\n        SQLField(\'Cofferto\', label = \'Course Offered To\', requires = IS_IN_DB(db, \'Program.id\', \'%(pname)s\')),\n        SQLField(\'No_of_credits\', \'integer\', label = \'No Of Credits\', requires = IS_NOT_EMPTY(error_message = T(\'fill this\'))),\n        SQLField(\'No_of_Hours\', label = \'No. Of Hours Per Week\',requires=IS_NOT_EMPTY()),\n        SQLField(\'No_of_Faculty\', label = \'No. Of Faculty\',requires=IS_NOT_EMPTY()),\n        SQLField(\'No_of_TA\', label = "No. Of TA\'S",requires=IS_NOT_EMPTY()),\n        SQLField(\'coursetype\', \'string\', label = \'Type Of Course\', requires = IS_IN_SET([\'Full\',\'Half\'])),\n        SQLField(\'semester\', label = \'Semester\', requires = IS_IN_DB(db, \'Semester.id\', \'%(semname)s\')))\n\n\n    if form.accepts(request.vars, session):\n      # STORING THE ENTERED VALUES IN VARIABLES \n        session.cname = request.vars.Cname\n        session.cid = request.vars.Cid\n        session.cofferto = request.vars.Cofferto\n        session.no_of_ta=request.vars.No_of_TA\n        session.no_of_faculty=request.vars.No_of_Faculty\n        session.cdts = request.vars.No_of_credits\n        session.ctype = request.vars.coursetype\n        session.semid = request.vars.semester\n        session.hours = request.vars.No_of_Hours\n        redirect(URL(r = request, f = \'add_courses1\'))\n    return dict(form=form)\n#-------------------------------------------------------------------------------\nimport re\nfrom collections import OrderedDict\ndef view_previous_applicant_l():\n\tx=request.args(0)\n\tx=x.split(\'_\')\n\tx=x[0]+\' \'+x[1]\n\tprint x\n\tif(session.login!=1):\n\t\tredirect(URL(r=request,f=\'index\'))\n\t\treturn dict()\n\n\tq=db((db.logs.id>0) & (db.logs.time==x)).select()\n\treturn dict(q=q)\ndef ta_records():\n\tx=request.args(0)\n\tx=x.split(\'_\')\n\tx=x[0]+\' \'+x[1]\n\tif(session.login!=1):\n\t\tredirect(URL(r=request,f=\'index\'))\n\t\treturn dict()\n\tq=db((db.ta_records.id>0) & (db.ta_records.time==x)).select()\n\treturn dict(q=q)\n\t\ndef view_previous_applicant_log():\n\tif(session.login!=1):\n\t\tredirect(URL(r=request,f=\'index\'))\n\t\treturn dict()\n\tp=db(db.logs.id>0).select(db.logs.time)\n\tl=[]\n\tfor i in p:\n\t\tl.append(i[\'time\'])\n\tl=set(l)\n#print l\n\treturn dict(l=l)\n\ndef ta_dates():\n\tif(session.login!=1):\n\t\tredirect(URL(r=request,f=\'index\'))\n\t\treturn dict()\n\tp=db(db.ta_records.id>0).select(db.ta_records.time)\n\tl=[]\n\tfor i in p:\n\t\tl.append(i[\'time\'])\n\tl=set(l)\n#print l\n\treturn dict(l=l)\n\n\ndef detail_view():\n\tif(session.login!=1):\n\t\tredirect(URL(r=request,f=\'index\'))\n\t\treturn dict()\n\tq=request.args(0)\n\tl=db(db.logs_applicant.logid==q).select()\n\treturn dict(l=l)\n\ndef ta_detail_view():\n\tif(session.login!=1):\n\t\tredirect(URL(r=request,f=\'index\'))\n\t\treturn dict()\n\tq=request.args(0)\n\tl=db(db.ta_applicant.ta_id==q).select()\n\treturn dict(l=l)\n#----------insertred by Team 26-------------------------------------------------\n#-----used to get faculties details after add_courses and insert records in database\n\ndef add_courses1():\n    \n    cname = session.cname\n    cid = session.cid\n    cofferto = session.cofferto\n    cdts = session.cdts\n    ctype = session.ctype\n    semid = session.semid\n    hours = session.hours\n    nof= int(session.no_of_faculty)\n    nota=session.no_of_ta\n    if request.vars.submit :\n        profname = request.vars.prof_name\n        profemail = request.vars.prof_email\n        if nof==1:\n\t\tif(profname==None or profemail==None or profname==\'\' or profemail==\'\'):\n\t\t\tsession.flash="Fill All Fields"\n\t\t\tredirect(URL(r = request, f = \'add_courses1\'))\n\t\t\t\t\t\n\telse:\n\t\tfor i in range(0,int(nof)):\n\t\t\tif(profname[i]==None or profemail[i]==None or profname[i]==\'\' or profemail[i]==\'\'):\n\t\t\t\tsession.flash="Fill All Fields"\n\t\t\t\tredirect(URL(r = request, f = \'add_courses1\'))\n\t\t\n        r = db(db.Course.cid == cid).select() \n        if(r):                 # if course is already there in the database\n            a = 1\n            for i in r:\n                use_id = i.id                               # if yes then  use_id <= Course.id of that course\n        else:                                       # else insert that course                       \n            db.auth_event.insert(origin=session.token,user_type="admin",description="added course "+cname,name=session.name,uid=session.roll)\n            use_id = db.Course.insert(cid = cid, cname = cname, cdts = cdts,\\\n            no_of_ta = nota,no_of_qta = 0, no_of_hta = 0, no_of_fta = 0, coursetype = ctype, sem_id = semid, hours_per_week = hours,no_of_faculty=nof)\n        if nof==1 :\n            s = db(db.Faculty.femail_id == profemail).select()\n            #if profname!="":\n            db.auth_event.insert(origin=session.token,user_type="admin",description="added faculty "+ profname+" for course "+cname,name=session.name,uid=session.roll) \n                   \n            if(s):                                      # if faculty is already present in the database\n                for row in s:\n                    newprof_id = row.id                                 # if yes then newprof_if <= Faculty.id of that faculty          \n            else:\n                newprof_id = db.Faculty.insert(fname = profname, femail_id = profemail)     # else insert that faculty\n      \n            k = db((db.Teach.faculty_id == newprof_id) & (db.Teach.course_id == use_id)).select()\n            if(k):                                      # if both of them are present in TEACH table do nothing     \n                a = 1\n            else:           # else insert   \n                db.Teach.insert(faculty_id = newprof_id, course_id = use_id)\n        else:\n            for i in range(0,int(nof)):\n                s = db(db.Faculty.femail_id == profemail[i]).select()\n                #if profname[i]!="":\n\t\tdb.auth_event.insert(origin=session.token,user_type="admin",description="added faculty "+ profname[i]+" for course "+cname,name=session.name,uid=session.roll)   \n                if(s):                                      # if faculty is already present in the database\n                    for row in s:\n                        newprof_id = row.id                                 # if yes then newprof_if <= Faculty.id of that faculty          \n                else:\n                    newprof_id = db.Faculty.insert(fname = profname[i], femail_id = profemail[i])       # else insert that faculty\n        \n                k = db((db.Teach.faculty_id == newprof_id) & (db.Teach.course_id == use_id)).select()\n                if(k):                                      # if both of them are present in TEACH table do nothing     \n                    a = 1\n                else:           # else insert   \n                    db.Teach.insert(faculty_id = newprof_id, course_id = use_id)\n       \n        session.flash = "Course Successfully added !!!"\n       \n        offer = db((db.OfferedTo.cid == use_id) & (db.OfferedTo.programid == cofferto)).select()    # insert in OfferedTo table\n        if(offer):\n            a = 1\n        else:\n            db.OfferedTo.insert(cid = use_id, programid = cofferto)\n        redirect(URL(r = request, f = \'add_courses\'))\n    return dict(nof=nof)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef add_faculty():\n    if session.login != 1:                      # -------- check if admin has logged in or not -------------------\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    form=form_factory(\n              SQLField(\'course\',label="Select Course ",requires=IS_IN_DB(db,\'Course.id\',\'%(cname)s (%(cid)s )\')),\n              SQLField(\'Faculty_name\',label="Faculty name",requires=IS_NOT_EMPTY()),\n              SQLField(\'Faculty_email\',label="Faculty email-id",requires=IS_NOT_EMPTY()))\n    if form.accepts(request.vars,session):\n        course=request.vars.course \n        profname=request.vars.Faculty_name\n        profemail=request.vars.Faculty_email\n        s = db(db.Faculty.femail_id == profemail).select()    \n        if(s):                                      # if faculty is already present in the database\n            for row in s:\n                newprof_id = row.id                                 # if yes then newprof_if <= Faculty.id of that faculty          \n        else:\n            newprof_id = db.Faculty.insert(fname = profname, femail_id = profemail)     # else insert that faculty\n        k = db((db.Teach.faculty_id == newprof_id) & (db.Teach.course_id == course)).select()\n        if(k):                                      # if both of them are present in TEACH table do nothing     \n            pass\n        else:           # else insert   \n            db.Teach.insert(faculty_id = newprof_id, course_id = course)\n            nof=db(db.Course.id==course).select(db.Course.no_of_faculty)[0]\n            db(db.Course.id==course).update(no_of_faculty=nof.no_of_faculty+1)   #----increasing the count of faculty of a course by 1---\n        c=db(db.Course.id==course).select()[0]\n\t#if profname!="":\n        db.auth_event.insert(origin=session.token,user_type="admin",description="added faculty "+profname+" to course "+c.cname,name=session.name,uid=session.roll)\n        session.flash = \'Faculty Successfully Added\'\n        redirect(URL(r = request, f = \'add_faculty\'))\n    return dict(form=form)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef add_program():\n    if session.login != 1:                      # -------- check if admin has logged in or not -------------------\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    form=form_factory(\n              SQLField(\'course\',label="Select Course ",requires=IS_IN_DB(db,\'Course.id\',\'%(cname)s (%(cid)s )\')),\n              SQLField(\'program\',label="Program",requires=IS_IN_DB(db,\'Program.id\',\'%(pname)s\')))\n    if form.accepts(request.vars,session):\n        course=request.vars.course   \n        program=request.vars.program\n        offer = db((db.OfferedTo.cid == course) & (db.OfferedTo.programid == program)).select()    \n        if(offer):               # -------if both of them are present in TEACH table do nothing------\n            pass\n        else:\n            db.OfferedTo.insert(cid = course, programid = program)    #---- insert in OfferedTo table------\n        c=db(db.Course.id==course).select()[0]\n        p=db(db.Program.id==program).select()[0]\n        db.auth_event.insert(origin=session.token,user_type="admin",description="added program "+p.pname+" to course "+c.cname,name=session.name,uid=session.roll)\n        session.flash = \'Program Successfully Added\'\n        redirect(URL(r = request, f = \'add_program\'))\n    return dict(form=form)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef update_course():\n    if session.login != 1:                      # -------- check if admin has logged in or not -------------------\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    session.admin_varCid=""\n    records = ""\n    form34 =form_factory(SQLField(\'course\', label = "Select Course ", requires = IS_IN_DB(db, \'Course.id\', \'%(cname)s ( %(cid)s )\')))\n                \n    if form34.accepts(request.vars,session):\n        session.admin_varCid=request.vars.course\n        records = db(db.Course.id==session.admin_varCid).select()\n    if(records):\n            records=records[0]\n   \n    return dict(records=records,form34=form34)\n\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\n\ndef delete():\n    if session.login != 1:                      # -------- check if admin has logged in or not -------------------\n          redirect(URL(r = request, f = \'index\'))\n          return dict()\n    course =db(db.Course.id>0).select()\n    if request.vars.submit:\n        session.courseid=request.vars.cid\n        if request.vars.confirm==\'yes\':         #-----checks if user have confirm the deletion\n            if request.vars.submit==\'Del_Course\':\n                c=db(db.Course.id==session.courseid).select()[0]\n                db.auth_event.insert(origin=session.token,user_type="admin",description="deleted course "+c.cname,name=session.name,uid=session.roll)\n                db(db.AppliedFor.cid == session.courseid).delete()\n                db(db.Course.id == session.courseid).delete()\n                db(db.SelectedTA.cid == session.courseid).delete()\n                db(db.OfferedTo.cid == session.courseid).delete()\n                db(db.Teach.course_id == session.courseid).delete()\n                session.flash = \'Course Successfully Deleted\'\n                redirect(URL(r = request, f = \'delete\'))    \n        elif request.vars.submit==\'Del_Faculty\':\n            redirect(URL(r = request, f =\'delete_faculty\'))\n        elif request.vars.submit==\'Del_Program\':\n            redirect(URL(r = request, f = \'delete_program\'))\n    return dict(course=course)    \n#-------------------------------------------------------------------------------\n#-------------------------------------------------------------------------------\ndef delete_faculty():\n    if session.login != 1:                      # -------- check if admin has logged in or not -------------------\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    fname=db((db.Teach.course_id==session.courseid)&(db.Teach.faculty_id==db.Faculty.id)).select()\n    if request.vars.submit:\n\tfaculty_name=db((db.Faculty.id==db.Teach.faculty_id) & (db.Teach.id == request.vars.fid)).select()[0]\n        c=db(db.Course.id==session.courseid).select()[0]       \n        db.auth_event.insert(origin=session.token,user_type="admin",description="deleted faculty "+faculty_name.Faculty.fname+" for course "+c.cname,name=session.name,uid=session.roll)\n        db(db.Teach.id == request.vars.fid).delete()\n        nof=db(db.Course.id==session.courseid).select(db.Course.no_of_faculty)[0]\n        db(db.Course.id==session.courseid).update(no_of_faculty=nof.no_of_faculty-1)   #----decreasing the count of faculty of a course by 1---\n        if (db(db.Teach.course_id == session.courseid).count() == 0) :\n            db(db.AppliedFor.cid == session.courseid).delete()\n            db(db.Course.id == session.courseid).delete()\n            db(db.SelectedTA.cid == session.courseid).delete()\n            db(db.OfferedTo.cid == session.courseid).delete()\n            session.flash = \'Course Successfully Deleted\'\n            redirect(URL(r = request, f = \'delete\'))\n        session.flash = \'Faculty Successfully Deleted\'  \n        redirect(URL(r = request, f = \'delete_faculty\'))\n    return dict(fname=fname)\n#-------------------------------------------------------------------------------\n#-------------------------------------------------------------------------------\ndef delete_program():\n    if session.login != 1:                      # -------- check if admin has logged in or not -------------------\n          redirect(URL(r = request, f = \'index\'))\n          return dict()\n\n    program=db((db.OfferedTo.cid==session.courseid)&(db.OfferedTo.programid==db.Program.id)).select()\n    if request.vars.submit:\n        c=db(db.Course.id==session.courseid).select()[0]\n        program=db(db.Program.id==request.vars.pid).select()[0]\n        db.auth_event.insert(origin=session.token,user_type="admin",description="deleted program "+program.pname+" for course "+c.cname,name=session.name,uid=session.roll)\n        db(db.OfferedTo.id == request.vars.pid).delete()\n        if (db(db.OfferedTo.cid == session.courseid).count() == 0) :\n            db(db.AppliedFor.cid == session.courseid).delete()\n            db(db.Course.id == session.courseid).delete()\n            db(db.SelectedTA.cid == session.courseid).delete()\n            db(db.Teach.course_id == session.courseid).delete()\n            session.flash = \'Course Successfully Deleted\'\n            redirect(URL(r = request, f = \'delete\'))\n        session.flash = \'Program Successfully Deleted\'\n        redirect(URL(r = request, f = \'delete_program\'))\n    return dict(program=program)\n#-------------------------------------------------------------------------------\n\n#-------------------------NOT IN USE--------------------------------------------\ndef delete_courses():\n    if session.login != 1:                      # -------- check if admin has logged in or not -------------------\n          redirect(URL(r = request, f = \'index\'))\n          return dict()\n\n    form = form_factory(                        # -------- creating form for the delete course --------------           \n          SQLField(\'course\', label = \'Select Course  \', requires = IS_IN_DB(db, \'Course.id\', \'%(cname)s  ( %(cid)s ) \' )),\n          SQLField(\'cofferto\', label = \'Select Program \', requires = IS_IN_DB(db, \'Program.id\', \'%(pname)s\')))\n    return dict(form=form)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\n# Allows Admin to see detail of Applicant\ndef applicant_profile():\n    if ( session.login != 1 ):\n        redirect(URL(r=request, f=\'index\'))\n        return dict()\n    records = db((db.Applicant.apemail_id == request.args(0)) & (db.Applicant.program_id == db.Program.id)).select()\n    return dict(records = records )\n#-------------------------------------------------------------------------------         \n\n\n#-------------------------------------------------------------------------------\ndef namewise_list():\n# ALLOWS ADMIN TO SEE THE APPLICANT LIST NAMEWISE \n    if (session.login != 1) :\n          redirect(URL(r = request, f = \'index\'))\n          return dict()\n\n    r = \'\'\n# form for select the applicant name \n    form = form_factory(    \n          SQLField(\'applicantId\', label = \'Select Applicant\', requires = IS_IN_DB(db, \'Applicant.id\',\\\n            \'%(apname)s (%(aprollno)s)\')))\n    if form.accepts(request.vars, session):\n          r = db((db.Applicant.id == db.AppliedFor.appid) & (db.Course.id == db.AppliedFor.cid) &\\\n            (db.Applicant.id == request.vars.applicantId)).select()\n    return dict(form = form, msg = r)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\n#------------------ ALLOWS ADMIN TO SEE THE LIST OF SELECTED APPLICANTS CATEGORY WISE eg: NAME, COURSE, ROLLNO etc.......-------------------\ndef selected_TA():\n       if session.login !=1 :\n          redirect(URL(r = request, f = \'index\'))\n          return dict()\n       return dict()\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef update_ta():\n        a=0\n        r= db(db.Course.id > 0).select()\n        for i in r:\n           \n           quater=db((db.SelectedTA.cid==i.id)&(db.SelectedTA.TAtype=="quarter")).count()\n           half=db((db.SelectedTA.cid==i.id)&(db.SelectedTA.TAtype=="half")).count()\n           full=db((db.SelectedTA.cid==i.id)&(db.SelectedTA.TAtype=="full")).count()\n           db(db.Course.id == i.id).update(no_of_qta = quater )\n           db(db.Course.id == i.id).update(no_of_hta = half)\n           db(db.Course.id == i.id).update(no_of_fta = full)\n           a=a+half+full+quater\n        \n        response.flash = "%d records modified" % a\n        return dict()\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef sel_course():\n        if session.login != 1:                                          \n              redirect(URL(r = request, f = \'index\'))\n              return dict()\n\n        form = form_factory(                                                               \n              SQLField(\'course\', label = \'Select Course  \', requires = IS_IN_DB(db, \'Course.id\', \'%(cname)s  ( %(cid)s ) \' )))\n        if form.accepts(request.vars, session):\n                redirect(URL(r = request, f = \'unselected_TA\',args=[form.vars.course]))\n        return dict(form=form)\n#-------------------------------------------------------------------------------\n\n#------------modified by Team 26------------------------------------------------\ndef unselected_TA():\n    if session.login !=1 :\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    formvars=""\n    form = FORM(INPUT(_type="submit",_value="SUBMIT"))\n    r = db((db.SelectedTA.cid==request.args[0])&(db.Course.id ==db.SelectedTA.cid)&(db.Applicant.id == db.SelectedTA.appid)).select(orderby = db.Course.id)\n    for i in r:\n        form.append(INPUT(_type="checkbox",_name=str(i.SelectedTA.id)))\n    if form.accepts(request.vars, formname=\'confirm\'):\n        n = 0\n        formvars=form.vars\n        for i in r:\n            applicantId = db(db.Applicant.aprollno == i.Applicant.aprollno).select()[0]\n            \n            if form.vars[str(i.SelectedTA.id)]=="on":\n                c=db(db.Course.id==i.SelectedTA.cid).select()[0]\n                db.auth_event.insert(origin=session.token,user_type="admin",description="unselected "+applicantId.apname+" for course "+c.cname,name=session.name,uid=session.roll)\n                db((db.AppliedFor.appid == applicantId.id)).update(noflag = \'0\')\n                db((db.AppliedFor.appid == applicantId.id) & (db.AppliedFor.cid==request.args[0])).update(status=\'None\')\n                db(db.SelectedTA.id == i.SelectedTA.id).delete()\n                db(db.SelectedTA.id == i.SelectedTA.id).delete()\n                if i.SelectedTA.TAtype=="quarter":\n                    db(db.Course.id == i.SelectedTA.cid).update(no_of_qta = db.Course.no_of_qta - 1 )\n                if i.SelectedTA.TAtype=="half":\n                    db(db.Course.id == i.SelectedTA.cid).update(no_of_hta = db.Course.no_of_hta - 1 )\n                if i.SelectedTA.TAtype=="full":\n                    db(db.Course.id == i.SelectedTA.cid).update(no_of_fta = db.Course.no_of_fta - 1 )\n                n += 1\n        \n        session.flash = "%d records modified" % n\n        redirect(URL(r=request, c=\'default\', f=\'sel_course\'))\n    return dict(r=r,form=form,formvars=formvars)\n\n\n#----------------- DISPLAYS THE LIST OF APPLICANTS FOR A SELECTED COURSE -----------------------------------------------\n\n#-----------------modified by Team 26-------------------------------------------\ndef admin_applicant_list_2():\n    if (session.login != 1) :\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    if request.vars.suggest=="no":               #--------------if reset button is pressed\n        session.p=""\n    elif request.vars.suggest=="True":           #--------------if any attribute is pressed acc. to whichsorting is desired\n        if session.p!="":\n            session.p=session.p+ \',\' + request.vars.s      #-------concat the new preference with old preference\n        else:\n            session.p=request.vars.s\n    else: \n        if((not request.vars.submit) and  request.vars.submit!="No_list"):\n            session.p=""\n            session.admin_varCid=""\n    var=session.p\n    records = db((db.AppliedFor.cid == session.admin_varCid) & (db.Applicant.id == db.AppliedFor.appid) & \\\n                                          (db.AppliedFor.cid==db.Course.id) & (db.Applicant.program_id == db.Program.id)).select(orderby=(var))\n        \n    form34 =form_factory(SQLField(\'course\', label = "Select Course ", requires = IS_IN_DB(db, \'Course.id\', \'%(cname)s ( %(cid)s )\',orderby=\'cname\')))\n                \n    if form34.accepts(request.vars,session):\n        session.admin_varCid=request.vars.course\n        records = db((db.AppliedFor.cid == request.vars.course) & (db.Applicant.id == db.AppliedFor.appid) & \\\n                                       (db.AppliedFor.cid==db.Course.id) & (db.Applicant.program_id == db.Program.id)).select()\n        session.p=""\n    if session.admin_varCid!="":\n        coursename=db((db.Course.id==session.admin_varCid)).select()[0].cname\n    else:\n        coursename=""\n    return dict(records=records,form34=form34,coursename=coursename)\n\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef admin_applicant_list_3():\n    if ( session.login != 1 ):\n          redirect(URL(r = request, f = \'index\'))\n          return dict()\n    return dict()\n#-------------------------------------------------------------------------------\n\n#--------------inserted by Team 26----------------------------------------------\n#---------------------------function to set dates------------------------------- \ndef set_date():\n    if ( session.login != 1 ):\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    check=db(db.Portaldate.id>0).select()\n    if check:\n        start=check[0].start_date\n        end=check[0].end_date\n    \n    else :\n        start=\'\'\n        end=\'\'\n    form=form_factory(\n           SQLField(\'start\', \'datetime\', label = \'Start_date\', requires = IS_NOT_EMPTY(error_message = T(\'fill this\'))),\n           SQLField(\'end\', \'datetime\', label = \'End_date\', requires = IS_NOT_EMPTY(error_message = T(\'fill this\'))))\n    form.vars.start = start\n    form.vars.end = end\n    if form.accepts(request.vars,session):\n        start = request.vars.start\n        end = request.vars.end\n        if check:\n            db(db.Portaldate.id>0).update(start_date=start,end_date=end)\n        else :    \n            db.Portaldate.insert(start_date=start,end_date=end)\n        db.auth_event.insert(origin=session.token,user_type="admin",description="set start date to "+start+" and end date to "+end,name=session.name,uid=session.roll)\n        response.flash = "Date changed."\n    return dict(form=form,start=start,end=end)\n#-------------------------------------------------------------------------------\ndef nominate_date():\n    if ( session.login != 1 ):\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    check=db(db.Faculty_deadline.id>0).select()\n    if check:\n        start=check[0].start_date\n        end=check[0].end_date\n    \n    else :\n        start=\'\'\n        end=\'\'\n    form=form_factory(\n           SQLField(\'start\', \'datetime\', label = \'Start_date\', requires = IS_NOT_EMPTY(error_message = T(\'fill this\'))),\n           SQLField(\'end\', \'datetime\', label = \'End_date\', requires = IS_NOT_EMPTY(error_message = T(\'fill this\'))))\n    form.vars.start = start\n    form.vars.end = end\n    if form.accepts(request.vars,session):\n        start = request.vars.start\n        end = request.vars.end\n        if check:\n            db(db.Faculty_deadline.id>0).update(start_date=start,end_date=end)\n        else :    \n            db.Faculty_deadline.insert(start_date=start,end_date=end)\n        db.auth_event.insert(origin=session.token,user_type="admin",description="set faculty deadline start date to "+start+" and end date to "+end,name=session.name,uid=session.roll)\n        response.flash = "Date changed."\n    return dict(form=form,start=start,end=end)\n#-------- FUNCTION FOR MAKING THE SUBJECT TO BE SENDED TO THE TAs --------------\ndef MakeStringForTA(course,sem, roll):\n    admin = db(db.Admin.id > 0).select(db.Admin.ademail_id)[0]\n    courseName = db(db.Course.cid == course).select()[0]\n    string="Dear Student,\\n\\rYou Have been selected as " + session.admin_rollType[roll] + " TA for " + courseName.cname + \'(\' + course + \')\' + \\\n          " for " + sem + " Semester. \\n The following steps (in order) need to be taken for confirmation of TAship.\\n" + "1. You should ACCEPT or REJECT the TA ship ONLY via the TA portal (sites.iiit.ac.in/taship) with in 24 hrs of the receipt of this email.\\n"+ "2. If you Accept TAship, you should get the TA form signed by the concerned faculty and the TA chair (in any order) and then submit the TA Report form in Academic office. \\r\\n\\n\\nTA Chair\\r\\nIIIT Hyderabad."\n\n#    string = "You Have been selected as " + session.admin_rollType[roll] + " TA for " + courseName.cname + \'(\' + course + \')\' + \\\n#          " for " + sem + " Semester. Please send your acceptance by sending a email to " + admin.ademail_id + ", and Please report to the concerned faculty and submit the TA Report form in Academic office.\\r\\n\\n\\nTA Chair\\r\\nIIIT Hyderabad."\n    return string\n#-------------------------------------------------------------------------------\n\n#-------- FUNCTION FOR MAKING THE SUBJECT TO BE SENDED TO THE FACULTY ----------\ndef MakeStringForFaculty(course, courseId, list):\n#    string = "Respected Faculty,\\r\\n\\tPlease note that following applicants are selected as a TA :\\r\\n" + list + " for your course "\\\n#          + course + "(" + courseId + ").\\r\\n\\nThank You\\r\\nTA Chair\\r\\nIIIT-Hyderabad"\n    string = "Respected Faculty,\\r\\n\\tPlease note that following applicants are selected as a TA for your course "\\\n          + course + "(" + courseId + ") :\\r\\n"+list+"\\r\\n\\nThank You\\r\\nTA Chair\\r\\nIIIT-Hyderabad"\n    return string\ndef MakeStringForad(course, courseId, list):\n#    string = "Respected Faculty,\\r\\n\\tPlease note that following applicants are selected as a TA :\\r\\n" + list + " for your course "\\\n#          + course + "(" + courseId + ").\\r\\n\\nThank You\\r\\nTA Chair\\r\\nIIIT-Hyderabad"\n    string = "Respected Admin,\\r\\n\\tPlease note that following applicants are selected as a TA for your course "\\\n          + course + "(" + courseId + ") :\\r\\n"+list+"\\r\\n\\nThank You\\r\\nTA Chair\\r\\nIIIT-Hyderabad"\n    return string\n#-------------------------------------------------------------------------------\n\n#------- FUNCTION FOR SENDING MAIL BY THE ADMIN TO THE FACULTY AND TA\'S --------\ndef admin_send_mail():\n    msg=\'\'\n    if ( session.login != 1) :\n            redirect(URL(r = request,f=\'index\'))\n            return dict()\n\n    courseId = request.args[0]\n    course = db(db.Course.id == courseId).select()[0]\n    courseId = db( (db.Course.id == courseId) & (db.Course.sem_id == db.Semester.id) & \\\n          (db.Course.id == db.Teach.course_id) & (db.Faculty.id == db.Teach.faculty_id )).select()[0]\n    applicantList = session.admin_applicantList\n    listForFacultyText = \'\\r\\n\'\n    for roll in applicantList:\n        record = db(db.Applicant.aprollno == roll).select()[0]\n        listForFacultyText += \'Name: \' + record.apname + \'\\r\\nTA Type: \' + session.admin_rollType[roll] + \'\\r\\nRoll No.: \' +\\\n              str(record.aprollno) + \'\\r\\nPhone No.: \' + str(record.phoneno) + \'\\r\\nEmail-id: \' + record.apemail_id + \'\\r\\n\\n\\n\'\n        sender = db(db.Admin.id > 0).select()[0]\n        sender = sender.ademail_id\n        reciever = record.apemail_id\n        text = MakeStringForTA(course.cid, courseId.Semester.semname, roll)\n        title =  \'TA-Ship Selection for \' + courseId.Course.cname\n        sendmail(sender, reciever, text, title)\n    \n    courseIdSame = db( (db.Course.id == courseId.Course.id) & (db.Course.sem_id == db.Semester.id) &\\\n          (db.Course.id == db.Teach.course_id) & (db.Faculty.id == db.Teach.faculty_id )).select()\n    for emailId in courseIdSame:\n        reciever = emailId.Faculty.femail_id\n        text = MakeStringForFaculty(courseId.Course.cname, courseId.Course.cid, listForFacultyText)\n        title = \'List of Selected TA\' + "\'s" + \' for \' + courseId.Course.cname + \'(\' + courseId.Course.cid + \')\'\n        sendmail(sender, reciever, text, title)\n    text = MakeStringForad(courseId.Course.cname, courseId.Course.cid, listForFacultyText)\n    returnValue1 = sendmail(sender, sender, text, title)\n    if returnValue1 == 1:\n       db.auth_event.insert(origin=sender,user_type="admin",description="mail sent to " + str(reciever),name=session.name,uid=session.roll)\n       msg = \'Mail Sent successfully\'\n    else:\n       msg = \'Mail Sending failed\'\n    return dict(msg=msg)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef admin_allocatedTA():\n    if( session.login != 1):\n       redirect(URL(r = request, f = \'index\'))\n       return dict()\n\n    records = db(db.Course.id > 0).select()\n    return dict(records=records)\n#-------------------------------------------------------------------------------\n\n#-----------modified by Team 26-------------------------------------------------\n#--------- ALLOWS ADMIN TO UPLOAD A FILE WHICH CONTAINS THE COURSE INFO --------\n# -------------- AN ALTERNATE FOR THE ADD COURSES QUERY ------------------------\n\n\n\n\nimport os\n\ndef upload():\n    if( session.login != 1):\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    \n    form = crud.create(db.Upload)\n    \n    if form.accepts(request.vars, session):\n        response.flash = \'file uploaded\'\n        f=request.vars.file\n        #print f\n        r = db(db.Upload.id > 0).select()\n        #print r\n        k=r[len(r)-1]\n        #print k\n        k=k.file.split(\'.\')[2:]\n        #print k\n        k=\'.\'.join(k)\n        #print k\n        db.auth_event.insert(origin=session.token,user_type="admin", description="uploaded file "+k,name=session.name,uid=session.roll)\n        i=r[len(r)-1]\n        filename = os.path.join(request.folder, \'uploads\', i.file)\n        f = open(filename)\n        for lines in f.readlines():                 \n            if len(lines) < 20:\n                break\n            lines = lines.strip(\'\\n\\r\')\n            list = lines.split(\',\')\n            if( not( db(db.Course.cid == list[1].strip()).select() ) ):\n                getCid = db.Course.insert(cname = list[0].strip(), cid = list[1].strip(),\\\n                cdts = list[2].strip(), no_of_ta = 10,no_of_qta = 0, no_of_hta = 0, no_of_fta = 0, \\\n                hours_per_week = 5, sem_id = 1, coursetype = list[3].strip(),no_of_faculty=list[4].strip())\n            else:\n                getCid = db(db.Course.cid == list[1].strip()).select()[0].id\n            for j in range(0,int(list[4])):\n                if( not( db(db.Faculty.femail_id == list[6+2*j].strip()).select() ) ):\n                    getPid = db.Faculty.insert(fname = list[5+2*j].strip(), femail_id = list[6+2*j].strip())\n                else:\n                    getPid = db(db.Faculty.femail_id == list[6+2*j].strip()).select()[0].id\n                if( not(db((db.Teach.course_id == getCid) & (db.Teach.faculty_id == getPid)).select()) ):\n                    db.Teach.insert(course_id = getCid, faculty_id = getPid)\n            \n    return dict(form=form)\n\n\n"""\nimport os\ndef upload():\n        if( session.login != 1):\n           redirect(URL(r = request, f = \'index\'))\n           return dict()\n\n        form = crud.create(db.Upload)\n        if form.accepts(request.vars, session):\n                response.flash = \'file uploaded\'\n                r = db(db.Upload.id > 0).select()\n                for i in r:\n                        filename = os.path.join(request.folder, \'uploads\', i.file)\n                        f = open(filename)\n                        for lines in f.readlines():\n                           if len(lines) < 20:\n                              break\n                           lines = lines.strip(\'\\n\')\n                           list = lines.split(\',\')\n                           if( not( db(db.Course.cid == list[1].strip(\' \')).select() ) ):\n                              getCid = db.Course.insert(cname = list[0].strip(\' \'), cid = list[1].strip(\' \'),\\\n                                    cdts = list[2].strip(\' \'), no_of_qta = 0, no_of_hta = 0, no_of_fta = 0, \\\n                                    hours_per_week = 5, sem_id = 1, coursetype = list[3].strip(\' \'),no_of_faculty=1)\n                           else:\n                              getCid = db(db.Course.cid == list[1].strip(\' \')).select()[0].id\n                           if( not( db(db.Faculty.femail_id == list[5].strip(\' \')).select() ) ):\n                              getPid = db.Faculty.insert(fname = list[4].strip(\' \'), femail_id = list[5].strip(\' \'))\n                           else:\n                              getPid = db(db.Faculty.femail_id == list[5].strip(\' \')).select()[0].id\n                           if( not(db((db.Teach.course_id == getCid) & (db.Teach.faculty_id == getPid)).select()) ):\n                              db.Teach.insert(course_id = getCid, faculty_id = getPid)\n                        #break\n        return dict(form=form)\n\n"""\n\n\n\n\n\n\n\n\n\n#-------------------------------------------------------------------------------\n#------------------ Admin Related queries ends here ----------------------------\n\n#------------------ Faculty related queries ------------------------------------\n#-------- ALLOWS FACULTY TO SEE THE APPLICANTS LIST FOR THE SELECTED COURSE ----\n#------------------modified by Team 26------------------------------------------\ndef faculty_applicant_list_2():\n        \n    if (session.login != 3) :\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    if request.vars.suggest=="no":\n        session.p=""\n    elif request.vars.suggest=="True":\n        if session.p!="":\n           session.p=session.p+ \',\' + request.vars.s\n        else:\n            session.p=request.vars.s\n    else: \n        if((not request.vars.submit) and  request.vars.submit!="No_list"):\n            session.p=""\n            session.faculty_varCid=""\n#        if(request.vars.submit=="No_List"):\n#            session.flash=request.args[0]\n#            session.course=request.args[0]\n    var=session.p\n    records = db((db.AppliedFor.cid == session.faculty_varCid) & (db.Applicant.id == db.AppliedFor.appid) & \\\n                                          (db.AppliedFor.cid==db.Course.id) & (db.Applicant.program_id == db.Program.id)).select(orderby=(var))\n    form34 =form_factory(SQLField(\'course\', label = "Select Course ", requires =\\\n                                                      IS_IN_DB(db((db.Faculty.femail_id == session.faculty_login_emailid)\\\n                                                     & (db.Teach.faculty_id == db.Faculty.id) & \\\n                                                  (db.Teach.course_id == db.Course.id)), \'Course.id\', \'%(cname)s ( %(cid)s )\')))\n                \n    if form34.accepts(request.vars,session):\n        r=[]\n        session.faculty_varCid=request.vars.course\n        records = db((db.AppliedFor.cid == session.faculty_varCid) & (db.Applicant.id == db.AppliedFor.appid) & \\\n                                       (db.AppliedFor.cid==db.Course.id) & (db.Applicant.program_id == db.Program.id)).select()\n       ##      records.append(r)\n      #  else:\n      #      records=r\n    #print records\n    flag=0\n    if len(records)==1:\n        flag=1\n    session.p=""\n    if session.faculty_varCid!="":\n         coursename=db((db.Course.id==session.faculty_varCid)).select()[0].cname\n    else:\n        coursename=""\n    return dict(flag=flag,form34=form34,records=records,coursename=coursename,courseid=session.faculty_varCid)\n#-------------------------------------------------------------------------------\n\n\n#-------------------------------------------------------------------------------\ndef faculty_applicant_list_3():\n    if (session.login != 3):\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n    return dict()\n#-------------------------------------------------------------------------------\ndef help():\n    return dict(mesg=session.token)\n#-------------------------------------------------------------------------------\n#--------- RETURNS A STRING WHICH IS THE SUBJECT OF THE MAIL BELOW -------------\ndef MakeStringForAdmin(courseName, courseId, list, sem):\n    string="I nominate \\n" + list + "for " + courseName + "(" + courseId +") for " + sem + "."\n    return string\n#-------------------------------------------------------------------------------\n\n#---- ALLOWS FACULTY TO SEND MAIL TO THE ADMIN FOR THE NOMINATIONS FOR THEIR COURSE --------------------------\ndef faculty_send_mail():\n    msg=\'\'\n    if (session.login != 3) :\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n\n    courseId = request.args[0]\n    course = db(db.Course.id == courseId).select()[0]\n    courseId = db( (db.Course.id == courseId) & (db.Course.sem_id == db.Semester.id) &\\\n          (db.Course.id == db.Teach.course_id) & (db.Faculty.id == db.Teach.faculty_id )).select()[0]\n    applicantList = session.faculty_applicantList\n    listForAdminText = \'\\r\\n\'\n    for roll in applicantList:\n        record = db(db.Applicant.aprollno == roll).select()[0]\n        listForAdminText += \'Name: \'+ record.apname + \'\\r\\nTA Type: \' + session.faculty_rollType[roll] + \'\\r\\nRoll No.: \' + \\\n              str(record.aprollno) + \'\\r\\nPhone No.: \' + str(record.phoneno) + \'\\r\\nEmailid: \' + record.apemail_id + \'\\r\\n\\r\\n\'\n#       reciever = record.apemail_id\n    reciever_g = db(db.Admin.id > 0).select()[0]\n    reciever_g = reciever_g.ademail_id\n    reciever_k = db(db.Admin.id > 0).select()[2]\n    reciever_k = reciever_k.ademail_id\n    \n    sender = courseId.Faculty.femail_id\n    text = MakeStringForAdmin(courseId.Course.cname, courseId.Course.cid, listForAdminText, courseId.Semester.semname)\n    title = \'TA-Ship Nominations for \' + courseId.Course.cname + \'(\' + courseId.Course.cid + \')\'\n    returnValue1 = sendmail(sender, reciever_k,  text, title)\n    returnValue1 = sendmail(sender, reciever_g,  text, title)\n    returnValue1 = 1\n    if (returnValue1 == 1) :\n       db.auth_event.insert(origin=sender,user_type="faculty",description="sent mail to" + str(reciever_g),name=session.name,uid=session.roll)\n       msg = \'Mail Sent successfully\'\n    else:\n       msg = \'Mail Sending failed\'\n    sendmail(sender, sender, text, title)\n    return dict(msg=msg)\n#-------------------------------------------------------------------------------\n\n#-------- ALLOWS FACULTY TO SEE THE TAS ALLOCATED IN THEIR COURSES -------------\ndef faculty_allocatedTA():\n    if( session.login != 3 ):\n       redirect(URL(r = request, f = \'index\'))\n       return dict()\n\n    records = db((db.Faculty.id == db.Teach.faculty_id) & (db.Teach.course_id == db.Course.id) & \\\n          (db.Faculty.femail_id == session.faculty_login_emailid)).select()\n    return dict(records=records)\n#-------------------------------------------------------------------------------\n\n#-------------------------------------------------------------------------------\ndef faculty_selectedTA():\n    if(session.login != 3):\n        redirect(URL(r = request, f = \'index\'))\n        return dict()\n#----------added (db.SelectedTA.flag==1) to select query to retrive applicant who have accepted the taship\n    records = db((db.Faculty.id == db.Teach.faculty_id)  & (db.Teach.course_id == db.Course.id) & \\\n          (db.SelectedTA.appid == db.Applicant.id) & (db.SelectedTA.cid == db.Course.id) & \\\n          (db.Faculty.femail_id == session.faculty_login_emailid) & (db.AppliedFor.appid == db.Applicant.id) &\\\n          (db.AppliedFor.cid == db.Course.id)).select(orderby = \'cname\')\n    return dict(records=records)\n#-------------------------------------------------------------------------------\n\n\n## supraja log table and logtable.html\ndef logtable():\n    row=None\n    \n    form = form_factory(\n                        SQLField(\'email\', \'string\'),\n                        SQLField(\'date\', \'date\',requires=IS_EMPTY_OR(IS_DATE())),\n                        SQLField(\'user\', requires=IS_EMPTY_OR(IS_IN_SET([\'faculty\',\'student\',\'admin\']))),\n                        SQLField(\'name\',\'string\'),\n                        SQLField(\'uid\',\'string\'))\n                        \n    if form.accepts(request,session):\n             \n             var1=form.vars.date\n             var2=form.vars.email\n             var3=form.vars.user\n             var4=form.vars.name\n             var5=form.vars.uid\n             if var4==None:\n                 var4=\'\'\n             if var3==None:\n                 var3=\'\'\n             if (var1!=None) & (var5!=\'\') :\n                \n                 row=db( (db.auth_event.origin.regexp("%"+var2+"%")) & (db.auth_event.user_type.startswith(var3)) &\n                         (db.auth_event.time_stamp.year()==var1.year) & (db.auth_event.time_stamp.month()==var1.month) & (db.auth_event.time_stamp.day()==var1.day) & (db.auth_event.name.like("%"+var4+"%")) & (db.auth_event.uid==var5)).select()\n             \n             elif (var1==None) & (var5!=\'\'):\n                  \n                  row=db( (db.auth_event.origin.like("%"+var2+"%")) & (db.auth_event.user_type.startswith(var3)) &\n                          (db.auth_event.name.like("%"+var4+"%")) & (db.auth_event.uid==var5)).select()\n             elif (var1!=None) & (var5==\'\'):\n                 \n                 row=db( (db.auth_event.origin.like("%"+var2+"%")) & (db.auth_event.user_type.startswith(var3)) &\n                         (db.auth_event.time_stamp.year()==var1.year) & (db.auth_event.time_stamp.month()==var1.month) & (db.auth_event.time_stamp.day()==var1.day) & (db.auth_event.name.like("%"+var4+"%"))).select()\n             else:\n                 \n                 row=db( (db.auth_event.origin.like("%"+var2+"%")) & (db.auth_event.user_type.startswith(var3)) & (db.auth_event.name.like("%"+var4+"%"))).select()\n    return dict(form=form,row=row)\n################################################################################\n# Above This is done by rangers #\n################################################################################\ndef index():\n# Below two lines are added by the rangers\n\n    session.login = 0\n    session.LOGGEDIN = 0\n    redirect(URL(r=request,f=\'login\'))\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n\n\n\n\n  #####################################################################################################################################\n  # Sending mail to admins from contacts#\ndef admin_contact():\n    sender=request.vars.sender\n    reciever=request.vars.reciever\n    subj=request.vars.subject\n    title=request.vars.Content\n    print sender\n    print reciever\n    print subj\n    print title\n    mail=NewMail()\n    # specify server\n    mail.settings.server=\'mail.iiit.ac.in:25\'\n    mail.settings.login=\'username:password\' or None\n\n# specify address to send as\n    mail.settings.sender=sender\n\n#   mail.settings.lock_keys=True\n    mail.settings.use_tls=True\n#       return mail.settings.keys()\n#send the message\n    print "Mail to be sent"\n    a=mail.send(to=reciever, subject=subj, mesg=title)\n    redirect(URL(\'contacts\'))\n\n#--------------------------------------------------------------------------\n\nimport re\ndef notify():\n  if(session.login == 1):\n   x=db(db.auth_event.description!="logged in").select()\n   timelog_admin=[]\n   for i in range(len(x)):\n    if x[i].description!="logged out":\n      timelog_admin.append(x[i])\n   return dict(timelog_admin=timelog_admin)\n  elif (session.login == 3):\n   x=db(db.Faculty.femail_id == session.token).select() #& db.Faculty.id == db.Teach.faculty_id & db.Teach.course_id == db.course.cid).select(db.Faculty.ALL, db.Teach.ALL, db.course.ALL)\n   y=db(x[0].id == db.Teach.faculty_id).select()\n   course=[]\n   for i in range(len(y)):\n    timelog=db(y[i].course_id == db.Course.id).select(db.Course.ALL)\n    course.append(timelog[0].cname)\n   timelog_course=[]\n   for i in db().select(db.auth_event.ALL):\n    for j in course:\n      if re.findall(j,i.description):\n        timelog_course.append(i)\n  # timelog=db(db.Faculty.femail_id==session.token & db.Faculty.id == db.Teach.faculty_id & db.Teach.course_id == db.course.cid).select(db.Faculty.ALL, db.Teach.ALL, db.course.ALL)\n   return dict(timelog_course=timelog_course)\n  elif (session.login==2):\n   x=db(db.auth_event.origin == session.token).select()\n   timelog_student=[]\n   for i in range(len(x)):\n    if ( x[i].description != "logged in"):\n     if ( x[i].description != "logged out"):\n        timelog_student.append(x[i])\n   return dict(timelog_student=timelog_student)\n\n#--------------------------------------------------------------------------\ndef adminpriv():\n    if session.login != 1 :     \n       redirect(URL(r = request , f = \'index\'))\n       return dict()\n    \n    return dict()\ndef about():\n\treturn\n\nresponse._vars=response._caller(ta_records)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/yogesh/imp/ssad/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/yogesh/imp/ssad/web2py/applications/taship/controllers/default.py", line 1883, in <module>\n  File "/home/yogesh/imp/ssad/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/yogesh/imp/ssad/web2py/applications/taship/controllers/default.py", line 910, in ta_records\n    x=x[0]+\' \'+x[1]\nIndexError: list index out of range\n'
p11
s.